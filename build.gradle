plugins {
    id 'eclipse'
    id 'org.jetbrains.kotlin.jvm' version "1.3.41"
    id "org.jetbrains.kotlin.plugin.allopen" version "1.3.41"
    id "com.google.protobuf" version "0.8.12"
    id "org.jlleitschuh.gradle.ktlint" version "9.2.1"
    id "com.github.hierynomus.license-base" version "0.15.0"
}

apply from: 'gradle/dependencies.gradle'
apply from: 'gradle/shared.gradle'


allprojects {
    repositories {
        mavenLocal()
        mavenCentral()
        jcenter()
        gradlePluginPortal()
        google()
    }

    license {
        header rootProject.file('gradle/LICENSE_HEADER.txt')
        mapping('java', 'SLASHSTAR_STYLE')
        mapping('kt', 'SLASHSTAR_STYLE')
        ext.year = '2020'
        ext.name = 'Frank Lyaruu'
    }


}

subprojects {
    version = rootProject.ext.floodplain_version
    apply plugin: "java"
    apply plugin: "eclipse"
    apply plugin: "maven-publish"
    apply plugin: 'org.jetbrains.kotlin.jvm'
    apply plugin: "org.jlleitschuh.gradle.ktlint"
    apply from: "$rootProject.projectDir/gradle/common.gradle"
    group = "io.floodplain"

    if (name == 'replication-protobuf') {
        apply plugin: 'com.google.protobuf'
    }
    apply plugin: 'com.github.hierynomus.license-base'

    publishing {
        publications {
            "$project.name"(MavenPublication) {
                groupId = "io.floodplain"
                artifactId = project.name
                version = rootProject.ext.floodplain_version

                from components.java

                artifact sourceJar
                artifact javadocJar

                pom.withXml {
                    asNode().with {
                        appendNode('packaging', 'jar')
                        appendNode('name', 'Floodplain')
                        appendNode('description', 'Floodplain Framework')
                        appendNode('url', 'https://floodplain.io')
                        appendNode('scm').with {
                            appendNode('url', 'scm:git:https://github.com/floodplainio/floodplain-library')
                            appendNode('connection', 'scm:git:git://github.com/floodplainio/floodplain-library.git')
                            appendNode('developerConnection', 'scm:git:git@github.com:floodplainio/floodplain-library.git')
                        }
                        appendNode('ciManagement').with {
                            appendNode('system', 'Circle CI')
                            appendNode('url', 'https://circleci.com/gh/floodplainio/floodplain-library')

                        }
                        appendNode('issueManagement').with {
                            appendNode('url', 'https://github.com/floodplainio/floodplain-library/issues')
                            appendNode('system', 'GitHub Issues')
                        }
                        appendNode('licenses').with {
                            appendNode('license').with {
                                appendNode('name', 'Apache 2.0')
                                appendNode('url', 'http://www.apache.org/licenses/LICENSE-2.0.txt')
                                appendNode('distribution', 'repo')
                            }
                        }

                        appendNode('organization').with {
                            appendNode('name', 'Floodplain')
                            appendNode('url', 'https://floodplain.io')
                        }
                        appendNode('developers').with {
                            appendNode('developer').with {
                                appendNode('id', 'flyaruu')
                                appendNode('name', 'Frank Lyaruu')
                                appendNode('email', 'flyaruu@gmail.com')
                                appendNode('organization', 'Floodplain')
                                appendNode('organizationUrl', 'https://floodplain.io')
                                appendNode('timezone', 'CEST')
                            }
                        }
                    }
                }
            }
        }
        repositories {
            maven {
                name = "Snapshots"
                url = uri("https://oss.sonatype.org/content/repositories/snapshots/")

                credentials {
                    username = project.findProperty("gpr.user") ?: System.getenv("CENTRAL_USERNAME")
                    password = project.findProperty("gpr.key") ?: System.getenv("CENTRAL_PASSWORD")
                }
            }
            maven {
                name = "Staging"
                url = uri("https://oss.sonatype.org/service/local/staging/deploy/maven2/")

                credentials {
                    username = project.findProperty("gpr.user") ?: System.getenv("CENTRAL_USERNAME")
                    password = project.findProperty("gpr.key") ?: System.getenv("CENTRAL_PASSWORD")
                }
            }
        }
    }
}

