/* Generated By:JJTree&JavaCC: Do not edit this line. ASTTipiNode.java */

package com.dexels.navajo.parser.compiled;

import com.dexels.immutable.api.ImmutableMessage;
import com.dexels.navajo.document.operand.Operand;
import com.dexels.navajo.expression.api.ContextExpression;
import com.dexels.navajo.expression.api.FunctionClassification;
import com.dexels.navajo.expression.api.TMLExpressionException;

import java.util.List;
import java.util.Optional;
import java.util.function.Function;

final class ASTTipiNode extends SimpleNode {

  String val = "";

  ASTTipiNode(int id) {
    super(id);
  }

@Override
public ContextExpression interpretToLambda(List<String> problems, String expression, Function<String, FunctionClassification> functionClassifier, Function<String,Optional<Node>> mapResolver) {
	return new ContextExpression() {
		
		@Override
		public boolean isLiteral() {
			return false;
		}
		
		@Override
		public Operand apply(Optional<ImmutableMessage> immutableMessage, Optional<ImmutableMessage> paramMessage)  {
		      try {
				return Operand.nullOperand(ImmutableMessage.ValueType.UNKNOWN);
//				.ofDynamic(tipiLink.evaluateExpression(val),"tipi");
			} catch (Exception e) {
				throw new TMLExpressionException("Error evaluating tipiLink: "+val, e);
			}
		}

		@Override
		public Optional<ImmutableMessage.ValueType> returnType() {
			return Optional.empty();
		}
		
		@Override
		public String expression() {
			return expression;
		}
	};
}

}
